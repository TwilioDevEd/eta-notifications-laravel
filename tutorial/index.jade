.chapter(data-title='Setting Up The Application')
  .step(
    data-title='What Are We Building?',
    data-file='app/Http/routes.php')
    :markdown
      ## Eta Notifications
      ## Laundry On-Demand

      ![ETA Notifications](http://howtodocs.s3.amazonaws.com/eta-notifications.png)

      There are a wide range of businesses that deliver goods or services to their
      customers on-demand. Companies like Uber, TaskRabbit, and Instacart have built
      an entire industry around the fact that we, the customer, like to order things
      instantly, and be notified of their progress towards us.

      In this tutorial, we'll build a notification system for Laundr.io ,an on-demand
      laundry service. In this app we will allow the delivery person to trigger notification events when:
      1. Delivery person picks up laundry to be delivered
      2. Delivery person is arriving to the customer's house.

      In a production app we would probably trigger the second notification when
      the Delivery person was physically near the customer, using GPS. In this
      case we'll just use a button.
  
      Let's get started!

  .step(
    data-title="Trigger the Notifications",
    data-file='app/Http/Controllers/OrderController.php'
    data-highlight='21-53')
    :markdown
      ## Trigger the Notifications

      This screen shows two buttons that allow the laundry delivery
      person to trigger notifications. There are two cases we'd like to handle:

      1. Send a notification when the laundry delivery person picked up the
         clothes, so the client will receive a SMS with the ETA of their
         clothes.
      1. Send a notification when the clothes have arrived to their destination.

      Now, on the server we're going to use the Twilio API Client to actually
      send out the notifications.

  .step(
    data-title='Setting Up the Twilio REST Client',
    data-file='app/Providers/TwilioRestClientProvider.php',
    data-highlight='15-20')
    :markdown
      ## Setting up the Twilio REST Client

      Here we create an authenticated Twilio REST API client that we can use
      anytime we need to send a text message.We initialize it with our
      [Twilio Account Credentials](//www.twilio.com/user/account/messaging/dashboard)
      stored as environment variables.

      ---

      **See Also:**
      * [Twilio Rest Client - Send SMS](//www.twilio.com/docs/quickstart/php/sms/sending-via-rest)
      * [Laravel Service Providers](//laravel.com/docs/master/providers)

  .step(
    data-title='Handling the Notification Trigger',
    data-file='app/Http/Controllers/OrderController.php',
    data-highlight='61-73')
    :markdown
      ## Handling the Notification Trigger

      In `OrderController` we extract the phone number stored in each order,
      and then simply send an SMS message with the specified body.

      Next let's look closer at how we send the SMS.

  .step(
    data-title='Handling the Twilio Callback',
    data-file='app/Http/Controllers/OrderController.php',
    data-highlight='55-59')
    :markdown
      ## Handling the Twilio Callback

      Twilio will make a post request each time your message status changes to one of the following: queued, failed, sent, delivered, or undelivered.

      The order's notifications status will change accordingly.

      ---
      **See Also:**
      * [Message Status](//www.twilio.com/docs/api/rest/sending-messages#status-callback-parameter-request-parameters)
  
  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an application to instantly route leads
      to sales people using text messages.
      
      If you are a PHP developer working with Twilio,  you might want
      to check out these other tutorials:

      [**Click-To-Call**](//www.twilio.com/docs/howto/walkthrough/click-to-call/php/laravel)

      Put a button on your web page that connects visitors to live support or sales people via telephone.

      [**Automated Survey**](https://www.twilio.com/docs/howto/walkthrough/automated-survey/php/laravel)

      Instantly collect structured data from your users with a survey conducted
      over a voice call or SMS text messages.

      ## Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
